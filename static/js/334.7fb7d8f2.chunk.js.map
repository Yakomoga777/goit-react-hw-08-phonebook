{"version":3,"file":"static/js/334.7fb7d8f2.chunk.js","mappings":"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","sources":["Redux/slises/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem.styled.js","components/ContactList/ContactItem.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.stiled.js","components/ContactList/ContactList.jsx","components/Container/Container.js"],"sourcesContent":["export const selectcontacts = state => state.contacts.contacts;\r\nexport const selectIsLoading = state => state.contacts.isLoading;\r\nexport const selectError = state => state.contacts.error;\r\nexport const selectFilter = state => state.filter;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n\r\n  width: 200px;\r\n  margin: 10px auto 10px auto;\r\n  justify-content: center;\r\n`;\r\nexport const StyledContactInput = styled.input`\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { StyledContactInput, StyledForm } from './ContactForm.styled';\r\nimport { addContact } from 'Redux/slises/operations';\r\nimport { selectcontacts } from 'Redux/slises/selectors';\r\nimport { selectIsLoggedIn } from 'Redux/auth/selectors';\r\n\r\nexport const ContactForm = ({ btn }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const contacts = useSelector(selectcontacts);\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n  // Контрольовані імпути\r\n  const handleChange = evt => {\r\n    if (evt.target.name === 'name') {\r\n      setName(evt.target.value);\r\n    } else if (evt.target.name === 'number') {\r\n      setNumber(evt.target.value);\r\n    }\r\n  };\r\n\r\n  // Сабміт форми\r\n  const onSubmit = evt => {\r\n    evt.preventDefault();\r\n    const form = evt.target;\r\n    const name = form.elements.name.value;\r\n    const number = form.elements.number.value;\r\n    const newContact = { name, number };\r\n    // console.log();\r\n\r\n    // перевірка на наявний конткт\r\n    const includesName = contacts.find(\r\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\r\n    );\r\n    if (!isLoggedIn) {\r\n      return alert(`Please log in to the application`);\r\n    }\r\n    if (!includesName) {\r\n      dispatch(addContact(newContact));\r\n    } else {\r\n      return alert(`${newContact.name} is already in contacts`);\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledForm onSubmit={onSubmit}>\r\n        <StyledContactInput\r\n          type=\"text\"\r\n          name=\"name\"\r\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n        <StyledContactInput\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <button type=\"submit\">{btn}</button>\r\n      </StyledForm>\r\n    </div>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-radius: 10px;\r\n\r\n  width: 280px;\r\n\r\n  &:hover {\r\n    /* width: 270px; */\r\n    /* height: 50px; */\r\n    /* border: 2px solid rgba(229, 229, 188); */\r\n    /* margin: -2px -2px -2px -2px;\r\n    border-radius: 10px; */\r\n    /* background-color: rgba(24, 232, 21, 0.24); */\r\n    box-shadow: 0px 0px 15px 0px rgba(43, 201, 202, 0.5);\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  background-color: transparent;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n\r\n  &:hover {\r\n    /* width: 270px; */\r\n    /* height: 50px; */\r\n    /* border: 2px solid rgba(229, 229, 188); */\r\n    /* margin: -2px -2px -2px -2px;\r\n    border-radius: 10px; */\r\n    /* background-color: rgba(24, 232, 21, 0.24); */\r\n    box-shadow: 0px 0px 15px 0px rgba(43, 201, 202, 1);\r\n  }\r\n`;\r\n\r\n// export const StyledButton = styled.button`\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from 'Redux/slises/operations';\r\n\r\nimport { StyledButton, StyledItem } from './ContactItem.styled';\r\n\r\nexport function ContactItem({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDelete = id => {\r\n    dispatch(deleteContact(id));\r\n  };\r\n  return (\r\n    <>\r\n      <StyledItem key={id}>\r\n        <div>\r\n          <p>{name}</p>\r\n          <p>{number}</p>\r\n        </div>\r\n        <StyledButton\r\n          type=\"StyledButton\"\r\n          onClick={() => {\r\n            handleDelete(id);\r\n          }}\r\n        >\r\n          Delete\r\n        </StyledButton>\r\n      </StyledItem>\r\n    </>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledFilterInput = styled.input`\r\n  display: block;\r\n  margin: 10px auto 10px auto;\r\n\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n`;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filteredContacts } from 'Redux/slises/filterSlise';\r\nimport { StyledFilterInput } from './Filter.styled';\r\n\r\nexport const Filter = ({ value }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Керований інпут фільтра\r\n  const handleChangeFilter = event => {\r\n    if (event.target.name === 'filter') {\r\n      const filterInputValue = event.target.value;\r\n      dispatch(filteredContacts(filterInputValue));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledFilterInput\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      required\r\n      value={value}\r\n      onChange={handleChangeFilter}\r\n    />\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const FlexList = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 5px;\r\n  justify-content: space-between;\r\n\r\n  width: 280px;\r\n`;\r\n","import { ContactForm } from 'components/ContactForm/ContactForm';\r\nimport { ContactItem } from 'components/ContactList/ContactItem';\r\nimport { H1, H2, StyledContainer } from 'components/Container/Container';\r\nimport { Filter } from 'components/Filter/Filter';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectedIsToken } from 'Redux/auth/selectors';\r\nimport { fetchContacts } from 'Redux/slises/operations';\r\nimport { selectIsLoading } from 'Redux/slises/selectors';\r\nimport { FlexList } from './ContactList.stiled';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(state => state.contacts.contacts);\r\n  const filter = useSelector(state => state.filter);\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const isToken = useSelector(selectedIsToken);\r\n  const dispatch = useDispatch();\r\n\r\n  const changedList = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <StyledContainer>\r\n        <H1>Phonebook</H1>\r\n        <ContactForm btn=\"Add contact\" />\r\n        <H2>Contacts</H2>\r\n        <Filter />\r\n        {isLoading && <p>Loading...</p>}\r\n        {isToken && (\r\n          <FlexList>\r\n            {changedList.map(item => {\r\n              const { id, name, number } = item;\r\n              return (\r\n                <ContactItem key={id} id={id} name={name} number={number} />\r\n              );\r\n            })}\r\n          </FlexList>\r\n        )}\r\n      </StyledContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledContainer = styled.div`\r\n  /* border: 1px solid black; */\r\n  border-radius: 10px;\r\n  width: 300px;\r\n\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 10px;\r\n\r\n  box-shadow: 0px 0px 15px 0px rgba(24, 106, 117, 1);\r\n`;\r\n\r\nexport const H1 = styled.h1`\r\n  text-align: center;\r\n`;\r\nexport const H2 = styled.h2`\r\n  text-align: center;\r\n`;\r\n"],"names":["selectcontacts","state","contacts","selectIsLoading","isLoading","StyledForm","styled","StyledContactInput","ContactForm","btn","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","isLoggedIn","selectIsLoggedIn","handleChange","evt","target","value","reset","onSubmit","preventDefault","form","newContact","elements","includesName","find","contact","toLowerCase","alert","addContact","type","title","required","onChange","StyledItem","StyledButton","ContactItem","id","onClick","deleteContact","handleDelete","StyledFilterInput","Filter","event","filterInputValue","filteredContacts","FlexList","filter","isToken","selectedIsToken","changedList","includes","useEffect","fetchContacts","H1","H2","map","item","StyledContainer"],"sourceRoot":""}