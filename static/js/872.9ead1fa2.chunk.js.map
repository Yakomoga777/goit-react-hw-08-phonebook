{"version":3,"file":"static/js/872.9ead1fa2.chunk.js","mappings":"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","sources":["Redux/slises/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.js","components/ContactList/ContactItem.styled.js","components/ContactList/ContactItem.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.stiled.js","components/ContactList/ContactList.jsx","components/Container/Container.js"],"sourcesContent":["export const selectcontacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import Notiflix from 'notiflix';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  StyledContactButton,\n  StyledContactInput,\n  StyledForm,\n} from './ContactForm.styled';\nimport { addContact } from 'Redux/slises/operations';\nimport { selectcontacts } from 'Redux/slises/selectors';\nimport { selectIsLoggedIn } from 'Redux/auth/selectors';\n\nexport const ContactForm = ({ btn }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectcontacts);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  // Контрольовані імпути\n  const handleChange = evt => {\n    if (evt.target.name === 'name') {\n      setName(evt.target.value);\n    } else if (evt.target.name === 'number') {\n      setNumber(evt.target.value);\n    }\n  };\n\n  // Сабміт форми\n  const onSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    const newContact = { name, number };\n    // console.log();\n\n    // перевірка на наявний конткт\n    const includesName = contacts.find(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    if (!isLoggedIn) {\n      return alert(`Please log in to the application`);\n    }\n    if (!includesName) {\n      dispatch(addContact(newContact));\n    } else {\n      return Notiflix.Notify.warning(`Контакт ${name} вже існує`);\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <StyledForm onSubmit={onSubmit}>\n        <StyledContactInput\n          type=\"text\"\n          name=\"name\"\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n        <StyledContactInput\n          type=\"tel\"\n          name=\"number\"\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n\n        <StyledContactButton type=\"submit\">{btn}</StyledContactButton>\n      </StyledForm>\n    </div>\n  );\n};\n","import { StyledButton } from 'components/ContactList/ContactItem.styled';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n\n  width: 200px;\n  margin: 10px auto 10px auto;\n  justify-content: center;\n`;\nexport const StyledContactInput = styled.input`\n  border: 1px solid black;\n  border-radius: 10px;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const StyledContactButton = styled(StyledButton)`\n  height: 40px;\n  padding: 10px;\n\n  line-height: 1;\n`;\n","import styled from 'styled-components';\n\nexport const StyledItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  border-radius: 10px;\n\n  width: 280px;\n\n  &:hover {\n    /* width: 270px; */\n    /* height: 50px; */\n    /* border: 2px solid rgba(229, 229, 188); */\n    /* margin: -2px -2px -2px -2px;\n    border-radius: 10px; */\n    /* background-color: rgba(24, 232, 21, 0.24); */\n    box-shadow: 0px 0px 15px 0px rgba(43, 201, 202, 0.5);\n  }\n`;\n\nexport const StyledButton = styled.button`\n  background-color: transparent;\n  border: 1px solid black;\n  border-radius: 10px;\n\n  &:hover {\n    /* width: 270px; */\n    /* height: 50px; */\n    /* border: 2px solid rgba(229, 229, 188); */\n    /* margin: -2px -2px -2px -2px;\n    border-radius: 10px; */\n    /* background-color: rgba(24, 232, 21, 0.24); */\n    box-shadow: 0px 0px 15px 0px rgba(43, 201, 202, 1);\n  }\n`;\n\n// export const StyledButton = styled.button`\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'Redux/slises/operations';\n\nimport { StyledButton, StyledItem } from './ContactItem.styled';\n\nexport function ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n      <StyledItem key={id}>\n        <div>\n          <p>{name}</p>\n          <p>{number}</p>\n        </div>\n        <StyledButton\n          type=\"StyledButton\"\n          onClick={() => {\n            handleDelete(id);\n          }}\n        >\n          Delete\n        </StyledButton>\n      </StyledItem>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const StyledFilterInput = styled.input`\n  display: block;\n  margin: 10px auto 10px auto;\n\n  border: 1px solid black;\n  border-radius: 10px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filteredContacts } from 'Redux/slises/filterSlise';\nimport { StyledFilterInput } from './Filter.styled';\n\nexport const Filter = ({ value }) => {\n  const dispatch = useDispatch();\n\n  // Керований інпут фільтра\n  const handleChangeFilter = event => {\n    if (event.target.name === 'filter') {\n      const filterInputValue = event.target.value;\n      dispatch(filteredContacts(filterInputValue));\n    }\n  };\n\n  return (\n    <StyledFilterInput\n      type=\"text\"\n      name=\"filter\"\n      required\n      value={value}\n      onChange={handleChangeFilter}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const FlexList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: space-between;\n\n  width: 280px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactItem } from 'components/ContactList/ContactItem';\nimport { H1, H2, StyledContainer } from 'components/Container/Container';\nimport { Filter } from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectedIsToken } from 'Redux/auth/selectors';\nimport { fetchContacts } from 'Redux/slises/operations';\nimport { selectIsLoading } from 'Redux/slises/selectors';\nimport { FlexList } from './ContactList.stiled';\n\nconst ContactList = () => {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n  const isLoading = useSelector(selectIsLoading);\n  const isToken = useSelector(selectedIsToken);\n  const dispatch = useDispatch();\n\n  const changedList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <StyledContainer>\n        <H1>Phonebook</H1>\n        <ContactForm btn=\"Add contact\" />\n        <H2>Contacts</H2>\n        <Filter />\n        {isLoading && <p>Loading...</p>}\n        {isToken && (\n          <FlexList>\n            {changedList.map(item => {\n              const { id, name, number } = item;\n              return (\n                <ContactItem key={id} id={id} name={name} number={number} />\n              );\n            })}\n          </FlexList>\n        )}\n      </StyledContainer>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  /* border: 1px solid black; */\n  border-radius: 10px;\n  width: 300px;\n\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n\n  box-shadow: 0px 0px 15px 0px rgba(24, 106, 117, 1);\n`;\n\nexport const H1 = styled.h1`\n  text-align: center;\n`;\nexport const H2 = styled.h2`\n  text-align: center;\n`;\n"],"names":["selectcontacts","state","contacts","selectIsLoading","isLoading","ContactForm","btn","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","isLoggedIn","selectIsLoggedIn","handleChange","evt","target","value","reset","onSubmit","preventDefault","form","elements","newContact","includesName","find","contact","toLowerCase","Notiflix","addContact","alert","type","title","required","onChange","StyledForm","styled","StyledContactInput","StyledContactButton","StyledButton","StyledItem","ContactItem","id","S","onClick","deleteContact","handleDelete","StyledFilterInput","Filter","event","filterInputValue","filteredContacts","FlexList","filter","isToken","selectedIsToken","changedList","includes","useEffect","fetchContacts","H1","H2","map","item","StyledContainer"],"sourceRoot":""}